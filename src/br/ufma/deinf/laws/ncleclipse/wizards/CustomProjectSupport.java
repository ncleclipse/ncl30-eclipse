package br.ufma.deinf.laws.ncleclipse.wizards;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;

import br.ufma.deinf.laws.ncleclipse.natures.NCLNatures;

public class CustomProjectSupport {
	 
	/**
	 * For this marvelous project we need to: - create the default Eclipse
	 * project - add the custom project nature - create the folder structure
	 * 
	 * @param projectName
	 * @param location
	 * @param natureId
	 * @return
	 */
	public static IProject createProject(String projectName, URI location,
			boolean isImportConnectorBase, boolean mustCreateMediaDir, boolean mustCreateMainNcl,
			String fileName, String fileId) {
		Assert.isNotNull(projectName);
		Assert.isTrue(projectName.trim().length() > 0);
		
		IProject project = createBaseProject(projectName, location);
		try {
			addNature(project);

			if (mustCreateMediaDir) {
				String[] paths = { "media" };
				addToProjectStructure(project, paths);
			}
			
			if (isImportConnectorBase) {
				File file = new File(new CustomProjectSupport().getClass()
						.getProtectionDomain().getCodeSource().getLocation().toString()
						.substring(5) + "/resources/ConnectorBase.ncl");
				IFile path = project.getFile("ConnectorBase.ncl");
				FileInputStream stream = new FileInputStream(file);
				path.create(stream, true, null);
			}
			
			if (mustCreateMainNcl){
				String containerName = ("/"+projectName);
				IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
				IResource resource = root.findMember(new Path(containerName));
				IContainer container = (IContainer) resource;
				final IFile file = container.getFile(new Path(fileName));
				try {
					InputStream stream = openContentStream1(fileId);
					if (isImportConnectorBase)
						stream = openContentStream2(fileId);
					if (file.exists()) {
						file.setContents(stream, true, true, null);
					} else {
						file.create(stream, true, null);
					}
					stream.close();
				} catch (IOException e) {
				}
			}
		
		} catch (CoreException e) {
			e.printStackTrace();
			project = null;
		} catch (IOException e) {
			e.printStackTrace();
		}	
		return project;
	}
	
	
	
	protected static InputStream openContentStream1(String fileId) {
		String contents = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
				+ "\n" + "<!-- Generated by NCL Eclipse -->" + "\n"
				+ "<ncl id=\"" + fileId
				+ "\" xmlns=\"http://www.ncl.org.br/NCL3.0/EDTVProfile\">"
				+ "\n" + "\t<head>" + "\n" + "\n" + "\t</head>" + "\n" + "\n"
				+ "\t<body>" + "\n" + "\n" + "\t</body>" + "\n" + "</ncl>";
		return new ByteArrayInputStream(contents.getBytes());
	}
	
	protected static InputStream openContentStream2(String fileId) {
		String contents = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
				+ "\n" + "<!-- Generated by NCL Eclipse -->" + "\n"
				+ "<ncl id=\"" + fileId
				+ "\" xmlns=\"http://www.ncl.org.br/NCL3.0/EDTVProfile\">"
				+ "\n" + "\t<head>" + "\n" + "\t\t<connectorBase>" + "\n" 
				+ "\t\t\t<importBase documentURI=\"ConnectorBase.ncl\" alias=\"con\"/>"
				+"\n" + "\t\t</connectorBase>" + "\n" + "\t</head>" + "\n" + "\n"
				+ "\t<body>" + "\n" + "\n" + "\t</body>" + "\n" + "</ncl>";
		return new ByteArrayInputStream(contents.getBytes());
	}
	/**
	 * Just do the basics: create a basic project.
	 * 
	 * @param location
	 * @param projectName
	 */
	private static IProject createBaseProject(String projectName, URI location) {
		// it is acceptable to use the ResourcesPlugin class
		IProject newProject = ResourcesPlugin.getWorkspace().getRoot()
				.getProject(projectName);

		if (!newProject.exists()) {
			URI projectLocation = location;
			IProjectDescription desc = newProject.getWorkspace()
					.newProjectDescription(newProject.getName());
			if (location != null
					&& ResourcesPlugin.getWorkspace().getRoot()
							.getLocationURI().equals(location)) {
				projectLocation = null;
			}

			desc.setLocationURI(projectLocation);
			try {
				newProject.create(desc, null);
				if (!newProject.isOpen()) {
					newProject.open(null);
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}

		return newProject;
	}

	private static void createFolder(IFolder folder) throws CoreException {
		IContainer parent = folder.getParent();
		if (parent instanceof IFolder) {
			createFolder((IFolder) parent);
		}
		if (!folder.exists()) {
			folder.create(false, true, null);
		}
	}

	/**
	 * Create a folder structure with a parent root, overlay, and a few child
	 * folders.
	 * 
	 * @param newProject
	 * @param paths
	 * @throws CoreException
	 */
	private static void addToProjectStructure(IProject newProject,
			String[] paths) throws CoreException {
		for (String path : paths) {
			IFolder etcFolders = newProject.getFolder(path);
			createFolder(etcFolders);
		}
	}

	private static void addNature(IProject project) throws CoreException {
		if (!project.hasNature(NCLNatures.NATURE_ID)) {
			IProjectDescription description = project.getDescription();
			String[] prevNatures = description.getNatureIds();
			String[] newNatures = new String[prevNatures.length + 1];
			System.arraycopy(prevNatures, 0, newNatures, 0, prevNatures.length);
			newNatures[prevNatures.length] = NCLNatures.NATURE_ID;
			description.setNatureIds(newNatures);

			IProgressMonitor monitor = null;
			project.setDescription(description, monitor);
		}
	}

	private static void copy(File src, File dst) throws IOException {
		InputStream in = new FileInputStream(src);
		OutputStream out = new FileOutputStream(dst);

		// Transferindo bytes de entrada para saÃ­da
		byte[] buf = new byte[1024];
		int len;
		while ((len = in.read(buf)) > 0) {
			out.write(buf, 0, len);
		}
		in.close();
		out.close();
	}
	
}
